The ``2-matrix_divided`` module
======================

This is a text file in reStructuredText format to test the above module.

Using ``matrix_divided``
------------------------

First import ``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

    >>> matrix_divided([[1 , 2 , 3], [4, 5, 6], [7, 8, 9]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

    >>> matrix_divided([[1 , 2 , 3], [4, 5, False], [7, 8, 9]], 1)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 0.0], [7.0, 8.0, 9.0]]

It should not work if we try to divide by 0

    >>> matrix_divided([[1 , 2 , 3], [4, 5, 6], [7, 8, 9]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2], [3, 4]], False)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

It should not work if the matrix is not a non empty list of non empty lists
and div is not a non 0 number

    >>> def test_exceptions(func, tests):
    ...     for test in tests:
    ...         try:
    ...             func(test[0], test[1])
    ...         except Exception as e:
    ...             pass
    ...		    print("Failed with {} for input {} and {}".format(type(e).__name__, type(test[0]), type(test[1])))
    ...         else:
    ...             print("Did not fail for input {} and {}".format(test[0], test[1]))
    ... 

    >>> tests = [(2.3, "a string"), (1.2, [1, 2]), (1, set("abracadabra")), (1.5, set("abracadabra")), (5, {"a":1, "b":4.5}), (5.34, {"a":1, "b":4.5}), (3, test_exceptions), (3.45, test_exceptions), (4, range(5)), (3.45, b'byte literal'), (3, None), ([], 3.4), ([[]], -5), ([[],[]], 3.6), ([[1, 2], [3, 4]], None)] 

Should separate empty stuff to print it better

    >>> test_exceptions(matrix_divided, tests)
    Failed with TypeError for input <class 'float'> and <class 'str'>
    Failed with TypeError for input <class 'float'> and <class 'list'>
    Failed with TypeError for input <class 'int'> and <class 'set'>
    Failed with TypeError for input <class 'float'> and <class 'set'>
    Failed with TypeError for input <class 'int'> and <class 'dict'>
    Failed with TypeError for input <class 'float'> and <class 'dict'>
    Failed with TypeError for input <class 'int'> and <class 'function'>
    Failed with TypeError for input <class 'float'> and <class 'function'>
    Failed with TypeError for input <class 'int'> and <class 'range'>
    Failed with TypeError for input <class 'float'> and <class 'bytes'>
    Failed with TypeError for input <class 'int'> and <class 'NoneType'>
    Failed with TypeError for input <class 'list'> and <class 'float'>
    Failed with TypeError for input <class 'list'> and <class 'int'>
    Failed with TypeError for input <class 'list'> and <class 'float'>
    Failed with TypeError for input <class 'list'> and <class 'NoneType'>

    >>> test_exceptions(matrix_divided, [(test[1], test[0]) for test in tests])
    Failed with TypeError for input <class 'str'> and <class 'float'>
    Failed with TypeError for input <class 'list'> and <class 'float'>
    Failed with TypeError for input <class 'set'> and <class 'int'>
    Failed with TypeError for input <class 'set'> and <class 'float'>
    Failed with TypeError for input <class 'dict'> and <class 'int'>
    Failed with TypeError for input <class 'dict'> and <class 'float'>
    Failed with TypeError for input <class 'function'> and <class 'int'>
    Failed with TypeError for input <class 'function'> and <class 'float'>
    Failed with TypeError for input <class 'range'> and <class 'int'>
    Failed with TypeError for input <class 'bytes'> and <class 'float'>
    Failed with TypeError for input <class 'NoneType'> and <class 'int'>
    Failed with TypeError for input <class 'float'> and <class 'list'>
    Failed with TypeError for input <class 'int'> and <class 'list'>
    Failed with TypeError for input <class 'float'> and <class 'list'>
    Failed with TypeError for input <class 'NoneType'> and <class 'list'>


It should work only if the first argument has rows of the same length

    >>> matrix_divided([[1 , 2 , 3], [4, 5], [7, 8, 9]], 1)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

It should only work if the values in the matrix are floats or ints

    >>> matrix_divided([[1 , 2 , 3], [4, 5, [1]], [7, 8, 9]], 1)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

It should return floats with 2 decimal points

    >>> matrix_divided([[1 , 2 , 3], [4, 5, 6], [7, 8, 9]], 3.141597)
    [[0.32, 0.64, 0.95], [1.27, 1.59, 1.91], [2.23, 2.55, 2.86]]

It should return a new matrix

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> new = matrix_divided(matrix, 3.151570)
    >>> new == matrix
    False

This function requires 2 arguments

     >>> matrix_divided([[1, 2], [2, 3]])
     Traceback (most recent call last):
     TypeError: matrix_divided() missing 1 required positional argument: 'div'

     >>> matrix_divided([[1, 2], [2, 3]], 3, 4)
     Traceback (most recent call last):
     TypeError: matrix_divided() takes 2 positional arguments but 3 were given
