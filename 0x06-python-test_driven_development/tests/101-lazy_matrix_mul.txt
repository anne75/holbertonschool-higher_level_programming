The ``101-lazy_matrix_mul`` module
======================

This is a text file in reStructuredText format to test the above module.

Using ``lazy_matrix_mul``
-------------------

First import ``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:


It should not work if the arguments are not not a non empty list of non empty lists

    >>> def test_exceptions(func, tests):
    ...     for test in tests:
    ...         try:
    ...             func(test[0], test[1])
    ...         except Exception as e:
    ...             pass
    ...		    print("Failed with {}:{} for input {} and {}".format(type(e).__name__, e, type(test[0]), type(test[1])))
    ...         else:
    ...             print("Did not fail for input {} and {}".format(test[0], test[1]))
    ... 

    >>> tests = [(2.3, "a string"), (1.2, [1, 2]), (1.5, set("abracadabra")), (5, {"a":1, "b":4.5}), (3.45, test_exceptions), (4, range(5)), (3.45, b'byte literal'), (3, None), ([[1, 2], [1, 2]], "a string"), ([[1, 2], [1, 2]], [1, 2]), ([[1, 2], [1, 2]], set("abracadabra")), ([[1, 2], [1, 2]], {"a":1, "b":4.5}), ([[1, 2], [1, 2]], test_exceptions), ([[1, 2], [1, 2]], range(5)), ([[1, 2], [1, 2]], b'byte literal'), ([[1, 2], [1, 2]], None)] 

Arguments are not both lists of lists

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with TypeError:Invalid data string supplied: a for input <class 'float'> and <class 'str'>
    Did not fail for input 1.2 and [1, 2]
    Failed with TypeError:unsupported operand type(s) for *: 'float' and 'set' for input <class 'float'> and <class 'set'>
    Failed with TypeError:unsupported operand type(s) for *: 'int' and 'dict' for input <class 'int'> and <class 'dict'>
    Failed with TypeError:unsupported operand type(s) for *: 'float' and 'function' for input <class 'float'> and <class 'function'>
    Did not fail for input 4 and range(0, 5)
    Failed with TypeError:Cannot cast array data from dtype('float64') to dtype('S32') according to the rule 'safe' for input <class 'float'> and <class 'bytes'>
    Failed with TypeError:unsupported operand type(s) for *: 'int' and 'NoneType' for input <class 'int'> and <class 'NoneType'>
    Failed with TypeError:Invalid data string supplied: a for input <class 'list'> and <class 'str'>
    Failed with ValueError:shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'set'>
    Failed with ValueError:shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'dict'>
    Failed with ValueError:shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'function'>
    Failed with ValueError:shapes (2,2) and (1,5) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'range'>
    Failed with ValueError:shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'bytes'>
    Failed with ValueError:shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'NoneType'>


    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with TypeError:Invalid data string supplied: a for input <class 'str'> and <class 'float'>
    Failed with ValueError:shapes (1,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'float'>
    Failed with TypeError:unsupported operand type(s) for *: 'set' and 'float' for input <class 'set'> and <class 'float'>
    Failed with TypeError:unsupported operand type(s) for *: 'dict' and 'int' for input <class 'dict'> and <class 'int'>
    Failed with TypeError:unsupported operand type(s) for *: 'function' and 'float' for input <class 'function'> and <class 'float'>
    Failed with ValueError:shapes (1,5) and (1,1) not aligned: 5 (dim 1) != 1 (dim 0) for input <class 'range'> and <class 'int'>
    Failed with TypeError:Cannot cast array data from dtype('float64') to dtype('S32') according to the rule 'safe' for input <class 'bytes'> and <class 'float'>
    Failed with TypeError:unsupported operand type(s) for *: 'NoneType' and 'int' for input <class 'NoneType'> and <class 'int'>
    Failed with TypeError:Invalid data string supplied: a for input <class 'str'> and <class 'list'>
    Did not fail for input [1, 2] and [[1, 2], [1, 2]]
    Failed with ValueError:shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0) for input <class 'set'> and <class 'list'>
    Failed with ValueError:shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0) for input <class 'dict'> and <class 'list'>
    Failed with ValueError:shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0) for input <class 'function'> and <class 'list'>
    Failed with ValueError:shapes (1,5) and (2,2) not aligned: 5 (dim 1) != 2 (dim 0) for input <class 'range'> and <class 'list'>
    Failed with ValueError:shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0) for input <class 'bytes'> and <class 'list'>
    Failed with ValueError:shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0) for input <class 'NoneType'> and <class 'list'>


An argument is an empty list
    >>> tests = [([], [[1, 2], [1, 2]]), ([[]], [[1, 2], [1, 2]]), ([[], []], [[1, 2], [1, 2]]), ([[]], [[]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError:shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (2,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>


    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with ValueError:shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>
    Did not fail for input [[1, 2], [1, 2]] and [[], []]
    Failed with ValueError:shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>


It should not work if the matrixes are not matrixes and contain only floats or ints

In one of the arguments, an element is not a number (int or float)
Should automate that
    >>> tests = [([[1, 2], [1, 2]], [[1, 2], ["a", 2]]), ([[1, 2], [1, 2]], [[1, 2], [[1, 2], 2]]), ([[1, 2], [1, 2]], [[1, 2], [True, 2]]), ([[1, 2], [1, 2]], [[1, 2], [1, None]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError:data type must provide an itemsize for input <class 'list'> and <class 'list'>
    Failed with ValueError:setting an array element with a sequence. for input <class 'list'> and <class 'list'>
    Did not fail for input [[1, 2], [1, 2]] and [[1, 2], [True, 2]]
    Failed with TypeError:unsupported operand type(s) for *: 'int' and 'NoneType' for input <class 'list'> and <class 'list'>

    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with ValueError:data type must provide an itemsize for input <class 'list'> and <class 'list'>
    Failed with ValueError:setting an array element with a sequence. for input <class 'list'> and <class 'list'>
    Did not fail for input [[1, 2], [True, 2]] and [[1, 2], [1, 2]]
    Failed with TypeError:unsupported operand type(s) for *: 'NoneType' and 'int' for input <class 'list'> and <class 'list'>

In one of the arguments, we have missing/extra elements
    >>> tests = [([[1, 2], [1, 2]], [[1, 2], [2]]), ([[1, 2], [1, 2]], [[1, 2], [1, 2], [2]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError:shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (2,2) and (1,3) not aligned: 2 (dim 1) != 1 (dim 0) for input <class 'list'> and <class 'list'>

    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Did not fail for input [[1, 2], [2]] and [[1, 2], [1, 2]]
    Failed with ValueError:shapes (1,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0) for input <class 'list'> and <class 'list'>


Matrixes can be multiplied if the number of rows of first = nb of cols of the second
Otherwise
    >>> tests = [([[1, 2, 3], [1, 2, 3]], [[1, 2], [1, 2]]), ([[1, 2], [1, 2]], [[1, 2, 3], [1, 2, 3], [3, 4, 5]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError:shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0) for input <class 'list'> and <class 'list'>
    Failed with ValueError:shapes (2,2) and (3,3) not aligned: 2 (dim 1) != 3 (dim 0) for input <class 'list'> and <class 'list'>


Now, it should work for ints and floats in matrixes

    >>> def test_good(func, tests):
    ...     for test in tests:
    ...         print(func(test[0], test[1]))

    >>> tests = [([[1.5425, 5.252], [646, 34]], [[1, 2, 3.45], [5, 68, -5.67]]), ([[23, 45.64, 3], [235, -53, 5], [0, 0, 0]], [[45, -6.325, 7], [-5245, 54, 21], [1, 2, 3]])]
    >>> test_good(lazy_matrix_mul, tests)
    [[   27.8025     360.221      -24.457215]
     [  816.        3604.        2035.92    ]]
    [[-238343.8      2325.085    1128.44 ]
     [ 288565.      -4338.375     547.   ]
     [      0.          0.          0.   ]]

